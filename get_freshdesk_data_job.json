{
	"jobConfig": {
		"name": "get_freshdesk_data_job",
		"description": "",
		"role": "arn:aws:iam::257825142977:role/glue_notebook_role",
		"command": "pythonshell",
		"version": "3.0",
		"runtime": null,
		"workerType": null,
		"numberOfWorkers": null,
		"maxCapacity": 0.0625,
		"maxRetries": 0,
		"timeout": 60,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "get_freshdesk_data_job.py",
		"scriptLocation": "s3://aws-glue-assets-257825142977-ap-south-1/scripts/",
		"language": "python-3.9",
		"spark": false,
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2024-07-05T07:22:45.776Z",
		"developerMode": true,
		"connectionsList": [],
		"temporaryDirectory": "s3://aws-glue-assets-257825142977-ap-south-1/temporary/",
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"pythonShellPrebuiltLibraryOption": "analytics",
		"flexExecution": false,
		"minFlexWorkers": null,
		"maintenanceWindow": null
	},
	"hasBeenSaved": false,
	"usageProfileName": null,
	"script": "import sys\nimport json\nimport pandas as pd \nimport boto3\nfrom io import StringIO\nfrom datetime import datetime, timedelta\n\n\ntry:\n    source_bucket = 'freshdesk-data-bucket'\n    freshdesk_csv_path = 'monthly-data'\n    file = 'ticket_details.csv'\n    s3 = boto3.client('s3')\n    csv_obj = s3.get_object(Bucket=source_bucket, Key=f'{freshdesk_csv_path}/{file}')\n    df_freshdesk_data = pd.read_csv(StringIO(csv_obj['Body'].read().decode('utf-8')))\n    df_freshdesk_data = df_freshdesk_data.fillna('')\n    df_freshdesk_data = df_freshdesk_data.astype(str)\n    dynamodb = boto3.resource('dynamodb')\n    freshdesk_data_table = dynamodb.Table('freshdesk-data')\n    with freshdesk_data_table.batch_writer() as batch:\n        for index, row in df_freshdesk_data.iterrows():\n            item = row.to_dict()\n            batch.put_item(Item=item)\n    print('Freshdesk Data successfully stored in dynamo db')        \nexcept Exception as e:\n    print(f'An error occurred: {str(e)}')\n    event_bridge = boto3.client('events')\n    try:\n        response = event_bridge.put_events(\n            Entries=[\n                {\n                    \"Time\": datetime.now(),\n                    \"Source\": \"custom_event\",\n                    \"DetailType\": \"Glue Job State Change\",\n                    \"Detail\": json.dumps({\n                        \"state\": \"ERROR\",\n                        \"jobName\": \"get_freshdesk_data_job\",\n                        \"errorMessage\": str(e)  \n                    })\n                }\n            ]\n        )\n        print(response)\n    except Exception as e:\n        print(f'An error occurred: {str(e)}')              \n\n"
}