{
	"jobConfig": {
		"name": "Reset_Processed_State_Job",
		"description": "",
		"role": "arn:aws:iam::257825142977:role/glue_notebook_role",
		"command": "pythonshell",
		"version": "3.0",
		"runtime": null,
		"workerType": null,
		"numberOfWorkers": null,
		"maxCapacity": 0.0625,
		"maxRetries": 0,
		"timeout": 60,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "Reset_Processed_State_Job.py",
		"scriptLocation": "s3://aws-glue-assets-257825142977-ap-south-1/scripts/",
		"language": "python-3.9",
		"spark": false,
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2024-04-29T06:08:32.190Z",
		"developerMode": true,
		"connectionsList": [],
		"temporaryDirectory": "s3://aws-glue-assets-257825142977-ap-south-1/temporary/",
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"observabilityMetrics": false,
		"pythonShellPrebuiltLibraryOption": "analytics",
		"flexExecution": false,
		"minFlexWorkers": null,
		"maintenanceWindow": null
	},
	"hasBeenSaved": false,
	"usageProfileName": null,
	"script": "import sys\nimport boto3\n\n\ndef scan_dynamodb_table(table):\n    data = []\n    client = boto3.client('dynamodb')\n    paginator = client.get_paginator('scan')\n    for page in paginator.paginate(TableName=table):\n        data.extend(page['Items'])\n    return data\n\n\ntry:\n    dynamodb = boto3.client('dynamodb')\n    table_name = \"customer_info\"\n    customer_items = scan_dynamodb_table(table_name)\n    for item in customer_items:\n        customer_name = item['customer_name']['S']\n        update_expression = 'SET Processed_Server_Utilization_Summary_Job = :val, ' \\\n                            'Processed_Availability_Summary_Job = :val, ' \\\n                            'Processed_Ticket_Graph_Job = :val, ' \\\n                            'Processed_Ticket_Details_Table_Job = :val, ' \\\n                            'Processed_Closed_Ticket_Details_Job = :val, ' \\\n                            'Processed_Customer_Pending_Ticket_Details_Job = :val'\n        expression_attribute_values = {':val': {'S': '0'}}\n        dynamodb.update_item(\n            TableName=table_name,\n            Key={'customer_name': {'S': customer_name}},\n            UpdateExpression=update_expression,\n            ExpressionAttributeValues=expression_attribute_values\n        )\n    \n    print(\"All items updated successfully.\")\nexcept Exception as e:\n    print(f'An error occurred: {str(e)}')\n    event_bridge = boto3.client('events')\n    try:\n        response = event_bridge.put_events(\n            Entries=[\n                {\n                    \"Time\": datetime.now(),\n                    \"Source\": \"custom_event\",\n                    \"DetailType\": \"Glue Job State Change\",\n                    \"Detail\": json.dumps({\n                        \"state\": \"ERROR\",\n                        \"jobName\": \"Reset_Processed_State_Job\",\n                        \"errorMessage\": str(e)  \n                    })\n                }\n            ]\n        )\n        print(response)\n    except Exception as e:\n        print(f'An error occurred: {str(e)}')  "
}