{
	"jobConfig": {
		"name": "Customer_Pending_Ticket_Details_Job",
		"description": "",
		"role": "arn:aws:iam::257825142977:role/glue_notebook_role",
		"command": "pythonshell",
		"version": "3.0",
		"runtime": null,
		"workerType": null,
		"numberOfWorkers": null,
		"maxCapacity": 0.0625,
		"maxRetries": 0,
		"timeout": 60,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "Customer_Pending_Ticket_Details_Job.py",
		"scriptLocation": "s3://aws-glue-assets-257825142977-ap-south-1/scripts/",
		"language": "python-3.9",
		"spark": false,
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2024-04-29T06:13:17.570Z",
		"developerMode": true,
		"connectionsList": [],
		"temporaryDirectory": "s3://aws-glue-assets-257825142977-ap-south-1/temporary/",
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"observabilityMetrics": false,
		"pythonShellPrebuiltLibraryOption": "analytics",
		"flexExecution": false,
		"minFlexWorkers": null,
		"maintenanceWindow": null
	},
	"hasBeenSaved": false,
	"usageProfileName": null,
	"script": "import sys\nimport boto3\nfrom awsglue.utils import getResolvedOptions\nimport json\nimport time\nimport requests\nimport pandas as pd\nfrom io import StringIO\nfrom datetime import datetime, timedelta\n\n\ndef get_tokens_from_dynamodb():\n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('token-table-performance-report')\n    response = table.scan()\n    item = response['Items'][0]\n    return item['refresh_token'], item['client_id'], item['client_secret'], item['access_token'], item['expires_in']\n\n\ndef update_processed_state_in_dynamodb(customer_name):\n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('customer_info')\n    processed = '1'\n    table.update_item(\n        Key={'customer_name': customer_name},\n        UpdateExpression='SET Processed_Customer_Pending_Ticket_Details_Job = :val1',\n        ExpressionAttributeValues={':val1': processed}\n    )\n\n\ndef update_failed_state_in_dynamodb(customer_name):\n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('customer_info')\n    processed = '2'\n    table.update_item(\n        Key={'customer_name': customer_name},\n        UpdateExpression='SET Processed_Availability_Summary_Job = :val1',\n        ExpressionAttributeValues={':val1': processed}\n    )\n\n\ndef scan_dynamodb_table(table):\n    data = []\n    client = boto3.client('dynamodb')\n    paginator = client.get_paginator('scan')\n    wait_time_seconds = 10\n    for page in paginator.paginate(TableName=table):\n        data.extend(page['Items'])\n        time.sleep(wait_time_seconds)\n    return data\n\n\ntry:        \n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('customer_info')\n    table_name = \"customer_info\"\n    customer_items = scan_dynamodb_table(table_name)\n    dynamodb = boto3.resource('dynamodb')\n    table_name = 'freshdesk-data'\n    items = scan_dynamodb_table(table_name)\n    if not items:\n        print(\"empty freshdesk data\")\n    for item in items:\n        for key, value in item.items():\n            item[key] = value['S']\n    df_freshdesk_data = pd.DataFrame(items)\n    if df_freshdesk_data.empty:\n        print(\"empty freshdesk dataframe\")\n    print(df_freshdesk_data)    \n    for item in customer_items:\n        print(\"item: \",item)\n        customer_name = item['customer_name']['S']\n        processed = item['Processed_Customer_Pending_Ticket_Details_Job']\n        if processed == '1' or processed == '2':\n            continue\n        customer_name_24x7 = customer_name\n        customer_name_freshdesk = customer_name\n        filtered_df = df_freshdesk_data[\n        (df_freshdesk_data['MS Customer Name'].str.replace(\" \", \"\").str.lower() == customer_name_freshdesk.replace(\" \", \"\").lower()) |\n        (df_freshdesk_data['MS Customer Name'].str.replace(\" \", \"\").str.lower() == customer_name_24x7.replace(\" \", \"\").lower())\n        ].copy()\n        if filtered_df.empty:\n            print(\"empty filtered dataframe\")\n            continue\n        df_ticket_details = filtered_df[['Ticket ID', 'Created date', 'Subject', 'Status', 'Priority', 'Resolved date']].copy()\n        df_ticket_details = df_ticket_details.rename(columns={'Created date': 'Creation Date', 'Subject': 'Subjects'})\n        if df_ticket_details.empty:\n            print(\"empty ticket_details dataframe\")\n            continue\n        print(df_ticket_details)\n        df_customer_pending_ticket_details = df_ticket_details[df_ticket_details['Status'] == 'Customer Pending'].copy()\n        if df_customer_pending_ticket_details.empty:\n            print(\"empty customer_pending_ticket_details dataframe\")\n            continue\n        print(df_customer_pending_ticket_details)\n        s3 = boto3.client('s3')\n        bucket_name = 'ms-monthly-report-ppt'\n        file_names = ['customer_pending_ticket_details.csv']\n        dataframes = [df_customer_pending_ticket_details]\n        # Determine last month and year\n        last_month = (datetime.now() - timedelta(days=30)).strftime('%B')\n        last_year = (datetime.now() - timedelta(days=30)).strftime('%Y')\n        folder_path = f'Report/{last_month}{last_year}/Output/{customer_name}/'\n        for df, file_name in zip(dataframes, file_names):\n            csv_buffer = StringIO()\n            df.to_csv(csv_buffer, index=False)\n            s3.put_object(\n                Bucket=bucket_name,\n                Key=folder_path + file_name,\n                Body=csv_buffer.getvalue()\n            )\n            print(f\"{file_name} saved to S3 at: s3://{bucket_name}/{folder_path}{file_name}\")\n        update_processed_state_in_dynamodb(customer_name)  \nexcept Exception as e:\n    print(f'An error occurred: {str(e)}')\n    event_bridge = boto3.client('events')\n    try:\n        response = event_bridge.put_events(\n            Entries=[\n                {\n                    \"Time\": datetime.now(),\n                    \"Source\": \"custom_event\",\n                    \"DetailType\": \"Glue Job State Change\",\n                    \"Detail\": json.dumps({\n                        \"state\": \"ERROR\",\n                        \"jobName\": \"Customer_Pending_Ticket_Details_Job\",\n                        \"errorMessage\": str(e)  \n                    })\n                }\n            ]\n        )\n        print(response)\n    except Exception as e:\n        print(f'An error occurred: {str(e)}')          "
}