{
	"jobConfig": {
		"name": "Availability_Summary_Job",
		"description": "",
		"role": "arn:aws:iam::257825142977:role/glue_notebook_role",
		"command": "pythonshell",
		"version": "3.0",
		"runtime": null,
		"workerType": null,
		"numberOfWorkers": null,
		"maxCapacity": 0.0625,
		"maxRetries": 0,
		"timeout": 60,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "Availability_Summary_Job.py",
		"scriptLocation": "s3://aws-glue-assets-257825142977-ap-south-1/scripts/",
		"language": "python-3.9",
		"spark": false,
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2024-04-29T06:09:15.145Z",
		"developerMode": true,
		"connectionsList": [],
		"temporaryDirectory": "s3://aws-glue-assets-257825142977-ap-south-1/temporary/",
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"observabilityMetrics": false,
		"pythonShellPrebuiltLibraryOption": "analytics",
		"flexExecution": false,
		"minFlexWorkers": null,
		"maintenanceWindow": null
	},
	"hasBeenSaved": false,
	"usageProfileName": null,
	"script": "import sys\nimport boto3\nfrom awsglue.utils import getResolvedOptions\nimport json\nimport requests\nimport boto3\nimport pandas as pd\nfrom io import StringIO\nfrom datetime import datetime, timedelta\n\n\ndef get_tokens_from_dynamodb():\n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('token-table-performance-report')\n    response = table.scan()\n    item = response['Items'][0]\n    return item['refresh_token'], item['client_id'], item['client_secret'], item['access_token'], item['expires_in']\n\n\ndef update_processed_state_in_dynamodb(customer_name):\n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('customer_info')\n    processed = '1'\n    table.update_item(\n        Key={'customer_name': customer_name},\n        UpdateExpression='SET Processed_Availability_Summary_Job = :val1',\n        ExpressionAttributeValues={':val1': processed}\n    )\n\n\ndef update_failed_state_in_dynamodb(customer_name):\n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('customer_info')\n    processed = '2'\n    table.update_item(\n        Key={'customer_name': customer_name},\n        UpdateExpression='SET Processed_Availability_Summary_Job = :val1',\n        ExpressionAttributeValues={':val1': processed}\n    )\n\n\ndef scan_dynamodb_table(table):\n    data = []\n    client = boto3.client('dynamodb')\n    paginator = client.get_paginator('scan')\n    for page in paginator.paginate(TableName=table):\n        data.extend(page['Items'])\n    return data\n\n\ntry:        \n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('customer_info')\n    table_name = \"customer_info\"\n    customer_items = scan_dynamodb_table(table_name)\n    for item in customer_items:\n        print(\"item: \",item)\n        customer_name = item['customer_name']['S']\n        processed = item['Processed_Availability_Summary_Job']\n        if processed == '1' or processed == '2':\n            continue\n        customer_name_24x7 = customer_name\n        customer_name_freshdesk = customer_name\n        dynamodb = boto3.resource('dynamodb')\n        table_name = 'monitor-groups'\n        table = dynamodb.Table(table_name)\n        response = table.scan(\n            FilterExpression=boto3.dynamodb.conditions.Attr('display_name').contains(customer_name_24x7)\n        )\n        if response['Count'] == 0:\n            print(\"No items found with display_name containing:\", customer_name_24x7)\n            continue\n        else:\n            group_id = response['Items'][0]['group_id']\n            print(\"Group ID for\", customer_name_24x7, \":\", group_id)\n        try:\n            # Get tokens from DynamoDB\n            refresh_token, client_id, client_secret, access_token, _ = get_tokens_from_dynamodb()\n        \n            # Get performance report data\n            url = f'https://www.site24x7.com/api/reports/performance/group/{group_id}?period=7&metric_aggregation=0'\n            headers = {\n                'Accept': 'application/json; version=2.1',\n                'Authorization': f'Zoho-oauthtoken {access_token}'\n            }\n            performance_report_response = requests.get(url, headers=headers)\n        \n            if performance_report_response.status_code == 200:\n                response_json = performance_report_response.json()\n                report_details = response_json['data']['report_details']\n                monitor_data = []\n        \n                for report in report_details:\n                    for monitor in report['monitors']:\n                        monitor_data.append({\n                            'Monitor_Group': report['name'],\n                            'Monitor_Name': monitor['name'],\n                            'Disk_Usage_Percentage': monitor.get('DISKUSEDPERCENT', '-'),\n                            'Memory_Utilization_Percentage': monitor.get('MEMUSEDPERCENT', '-'),\n                            'CPU_Usage_Percentage': monitor.get('CPUUSEDPERCENT', '-'),\n                            'Availability': monitor.get('availability', '-')\n                        })\n        \n                df_performance_report = pd.DataFrame(monitor_data)\n            else:\n                print(\"Failed to fetch performance report data\")\n                continue\n        except Exception as e:\n            print(f'An error occurred: {str(e)}')\n            update_failed_state_in_dynamodb(customer_name)\n            continue\n        pd.set_option('display.max_rows', 5)\n        pd.set_option('display.max_columns', 5)\n        print(df_performance_report)\n        df_performance_report['CPU_Usage_Percentage'] = pd.to_numeric(df_performance_report['CPU_Usage_Percentage'], errors='coerce')\n        df_performance_report['Availability'] = pd.to_numeric(df_performance_report['Availability'], errors='coerce')\n        availability_bins = [-1, 80, 90, 101]\n        availability_labels = ['<80%', '80-90%', '>90%']\n        availability_counts = pd.cut(df_performance_report['Availability'], bins=availability_bins, labels=availability_labels).value_counts().sort_index()\n        availability_df = pd.DataFrame({\n            'Percentage': availability_counts.index,\n            'Servers': availability_counts.values\n        })\n        print(availability_df)\n        s3 = boto3.client('s3')\n        bucket_name = 'ms-monthly-report-ppt'\n        file_names = ['availability_summary.csv']\n        dataframes = [availability_df]\n        # Determine last month and year\n        last_month = (datetime.now() - timedelta(days=30)).strftime('%B')\n        last_year = (datetime.now() - timedelta(days=30)).strftime('%Y')\n        folder_path = f'Report/{last_month}{last_year}/Output/{customer_name}/'\n        for df, file_name in zip(dataframes, file_names):\n            csv_buffer = StringIO()\n            df.to_csv(csv_buffer, index=False)\n            s3.put_object(\n                Bucket=bucket_name,\n                Key=folder_path + file_name,\n                Body=csv_buffer.getvalue()\n            )\n            print(f\"{file_name} saved to S3 at: s3://{bucket_name}/{folder_path}{file_name}\")\n        update_processed_state_in_dynamodb(customer_name)   \nexcept Exception as e:\n    print(f'An error occurred: {str(e)}')\n    event_bridge = boto3.client('events')\n    try:\n        response = event_bridge.put_events(\n            Entries=[\n                {\n                    \"Time\": datetime.now(),\n                    \"Source\": \"custom_event\",\n                    \"DetailType\": \"Glue Job State Change\",\n                    \"Detail\": json.dumps({\n                        \"state\": \"ERROR\",\n                        \"jobName\": \"Availability_Summary_Job\",\n                        \"errorMessage\": str(e)  \n                    })\n                }\n            ]\n        )\n        print(response)\n    except Exception as e:\n        print(f'An error occurred: {str(e)}')   "
}