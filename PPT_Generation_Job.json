{
	"jobConfig": {
		"name": "PPT_Generation_Job",
		"description": "",
		"role": "arn:aws:iam::257825142977:role/glue_notebook_role",
		"command": "pythonshell",
		"version": "3.0",
		"runtime": null,
		"workerType": null,
		"numberOfWorkers": null,
		"maxCapacity": 0.0625,
		"maxRetries": 0,
		"timeout": 60,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "PPT_Generation_Job.py",
		"scriptLocation": "s3://aws-glue-assets-257825142977-ap-south-1/scripts/",
		"language": "python-3.9",
		"spark": false,
		"jobParameters": [
			{
				"key": "--additional-python-modules",
				"value": "python-pptx==0.6.23",
				"existing": false
			}
		],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2024-04-29T06:24:44.419Z",
		"developerMode": true,
		"connectionsList": [],
		"temporaryDirectory": "s3://aws-glue-assets-257825142977-ap-south-1/temporary/",
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"observabilityMetrics": false,
		"pythonShellPrebuiltLibraryOption": "analytics",
		"flexExecution": false,
		"minFlexWorkers": null,
		"maintenanceWindow": null
	},
	"hasBeenSaved": false,
	"usageProfileName": null,
	"script": "import sys\nimport boto3\nfrom io import BytesIO\nfrom io import StringIO\nfrom pptx import Presentation\nfrom pptx.enum.shapes import MSO_SHAPE_TYPE\nfrom pptx.enum.chart import XL_CHART_TYPE\nfrom pptx.chart.data import CategoryChartData\nfrom pptx.util import Inches\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport botocore\nfrom botocore.errorfactory import ClientError\n\n\ndef scan_dynamodb_table(table):\n    data = []\n    client = boto3.client('dynamodb')\n    paginator = client.get_paginator('scan')\n    for page in paginator.paginate(TableName=table):\n        data.extend(page['Items'])\n    return data\n\n\ntry:\n    s3 = boto3.client('s3')\n    \n    # Bucket names\n    source_bucket = 'ms-monthly-report-ppt'\n    template_bucket = 'ms-monthly-report-ppt'\n    destination_bucket = 'ms-monthly-report-ppt'\n    \n    # Folder names\n    template_folder = 'Template'\n    \n    # Read customer names from dynamodb\n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('customer_info')\n    table_name = \"customer_info\"\n    customer_items = scan_dynamodb_table(table_name)\n    customer_list = [item['customer_name']['S'] for item in customer_items]\n    \n    # Determine last month and year\n    last_month = (datetime.now() - timedelta(days=30)).strftime('%B')\n    last_year = (datetime.now() - timedelta(days=30)).strftime('%Y')\n\n    for customer_name in customer_list:\n        customer_csv_path =  f'Report/{last_month}{last_year}/Output/{customer_name}'\n        destination_folder = f'Report/{last_month}{last_year}/ppt/{customer_name}'\n        # File names\n        output_file = f'MS_Report.pptx'\n        \n        # For storing table position\n        table_left = None\n        table_top = None\n        table_width = None\n        table_height = None\n        \n        # Read CSV files from S3\n        csv_files = ['server_utilization_summary.csv', 'availability_summary.csv', 'ticket_details_table.csv', 'ticket_graph.csv', 'closed_ticket_details.csv', 'customer_pending_ticket_details.csv']\n        csv_dict = {filename: 1 for filename in csv_files}\n        print(csv_dict)\n        csv_data = {}\n        for file in csv_files:\n            try:\n                s3.head_object(Bucket=source_bucket, Key=f'{customer_csv_path}/{file}')\n                csv_obj = s3.get_object(Bucket=source_bucket, Key=f'{customer_csv_path}/{file}')\n                csv_data[file] = pd.read_csv(StringIO(csv_obj['Body'].read().decode('utf-8')))\n            except botocore.exceptions.ClientError as e:\n                if e.response['Error']['Code'] == \"404\":\n                    print(f\"File {file} does not exist.\")\n                    csv_dict[file] = 0\n                else:\n                    print(f\"An error occurred while checking for file {file}: {e}\")    \n                    csv_dict[file] = 0\n        print(csv_dict)\n        print(customer_name)\n        # Check if all values in the dictionary are 0\n        all_zero = all(value == 0 for value in csv_dict.values())\n        if all_zero:\n             # Read template from S3\n            template_file = 'template4.pptx'\n            template_obj = s3.get_object(Bucket=template_bucket, Key=f'{template_folder}/{template_file}')\n            template_data = template_obj['Body'].read()\n            # Create presentation\n            presentation = Presentation(BytesIO(template_data))     \n            # Iterate through slides\n            for slide_index in range(len(presentation.slides)):\n                slide = presentation.slides[slide_index]\n                \n                if slide_index == 0:      \n                    slide.shapes[4].text_frame.paragraphs[0].runs[0].text = customer_name\n                    slide.shapes[4].text_frame.paragraphs[0].runs[1].text = \"\"\n                    slide.shapes[5].text_frame.paragraphs[0].runs[0].text = last_month + ' - ' + last_year            \n            # Save presentation to BytesIO\n            output_data = BytesIO()\n            presentation.save(output_data)\n            \n            # Upload presentation to S3\n            s3.put_object(Bucket=destination_bucket, Key=f'{destination_folder}/{output_file}', Body=output_data.getvalue())\n            print(\"Presentation updated and uploaded successfully.\")\n            continue\n        if csv_dict['ticket_details_table.csv']:\n            num_rows, num_cols = csv_data['ticket_details_table.csv'].shape\n        else:\n            num_rows = 0\n            num_cols = 0\n        print(num_rows)\n        if num_rows <= 10:\n            # Read template from S3\n            template_file = 'template.pptx'\n            template_obj = s3.get_object(Bucket=template_bucket, Key=f'{template_folder}/{template_file}')\n            template_data = template_obj['Body'].read()\n            if num_rows > 0:\n                csv_data['ticket_details_table1.csv'] = csv_data['ticket_details_table.csv'].iloc[:5]\n            else:\n                columns = ['Ticket ID', 'Creation Date', 'Subjects', 'Status', 'Priority', 'Resolved Date']\n                csv_data['ticket_details_table1.csv'] = pd.DataFrame(columns=columns)\n            # Create presentation\n            presentation = Presentation(BytesIO(template_data))\n            \n            # Iterate through slides\n            for slide_index in range(len(presentation.slides)):\n                slide = presentation.slides[slide_index]\n                \n                if slide_index == 0:      \n                    slide.shapes[4].text_frame.paragraphs[0].runs[0].text = customer_name\n                    slide.shapes[4].text_frame.paragraphs[0].runs[1].text = \"\"\n                    slide.shapes[5].text_frame.paragraphs[0].runs[0].text = last_month + ' - ' + last_year\n                # Update charts\n                if slide_index == 2:\n                    count = 0\n                    for shape in slide.shapes:\n                        if shape.shape_type == MSO_SHAPE_TYPE.CHART:\n                            chart = shape.chart          \n                            if chart.chart_type == XL_CHART_TYPE.BAR_CLUSTERED:\n                                if count == 0:\n                                    if csv_dict['server_utilization_summary.csv']:\n                                        data = csv_data['server_utilization_summary.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Percentage'])\n                                            values.append(row['Servers'])\n                \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1\n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Server Utilization Summary data not available\"\n                                        count += 1\n                                elif count == 2:\n                                    if csv_dict['availability_summary.csv']:\n                                        data = csv_data['availability_summary.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Percentage'])\n                                            values.append(row['Servers'])\n                                    \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1    \n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Availability Summary data not available\"\n                                        count += 1\n                                else:\n                                    count += 1 \n                                    continue\n                                \n                            elif chart.chart_type == XL_CHART_TYPE.BAR_STACKED:                      \n                                if count == 1:\n                                    if csv_dict['ticket_graph.csv']:\n                                        data = csv_data['ticket_graph.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Status'])\n                                            values.append(row['Count'])\n                                    \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1     \n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Ticket Graph data not available\"\n                                        count += 1                                        \n                                else:\n                                    count += 1 \n                                    continue\n                            else:\n                                print(\"Chart type is not XL_CHART_TYPE.BAR_CLUSTERED\")\n                                print(chart.chart_type)\n                if slide_index == 3:\n                    count = 0\n                    for shape in slide.shapes:\n                        if shape.shape_type == MSO_SHAPE_TYPE.CHART:\n                            chart = shape.chart  \n                            if chart.chart_type == XL_CHART_TYPE.BAR_CLUSTERED:\n                                if count == 0:\n                                    if csv_dict['server_utilization_summary.csv']:\n                                        data = csv_data['server_utilization_summary.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Percentage'])\n                                            values.append(row['Servers'])\n                    \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1\n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Server Utilization Summary data not available\"\n                                        count += 1                                        \n                                elif count == 1:\n                                    if csv_dict['availability_summary.csv']:\n                                        data = csv_data['availability_summary.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Percentage'])\n                                            values.append(row['Servers'])\n                                    \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1   \n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Availability Summary data not available\"\n                                        count += 1                                        \n                                else:\n                                    count += 1 \n                                    continue\n                                \n                            else:\n                                print(\"Chart type is not XL_CHART_TYPE.BAR_CLUSTERED\")\n                                print(chart.chart_type)     \n                \n                # Update tables\n                elif slide_index == 4:\n                    existing_table = None\n                    for shape in slide.shapes:\n                        if shape.shape_type == MSO_SHAPE_TYPE.TABLE:\n                            existing_table = shape\n                            break\n                    table_left = existing_table.left\n                    table_top = existing_table.top\n                    table_width = existing_table.width\n                    table_height = existing_table.height    \n                    if csv_dict['ticket_details_table.csv']:     \n                        num_rows, num_cols = csv_data['ticket_details_table1.csv'].shape\n                        table_height = Inches(1) if num_rows == 0 else  Inches(2)\n                        new_table = slide.shapes.add_table(rows=len(csv_data['ticket_details_table1.csv']) + 1, cols=len(csv_data['ticket_details_table1.csv'].columns),\n                                    left=existing_table.left, top=existing_table.top, width=existing_table.width, height=table_height).table\n                        \n                        for c in range(len(csv_data['ticket_details_table1.csv'].columns)):\n                            new_table.cell(0, c).text = csv_data['ticket_details_table1.csv'].columns[c]\n                        \n                        for r in range(len(csv_data['ticket_details_table1.csv'])):\n                            for c in range(len(csv_data['ticket_details_table1.csv'].columns)):\n                                new_table.cell(r + 1, c).text = str(csv_data['ticket_details_table1.csv'].iloc[r, c]) if pd.notnull(csv_data['ticket_details_table1.csv'].iloc[r, c]) else \"\"\n                        \n                        slide.shapes._spTree.remove(existing_table._element)\n                        table_left = existing_table.left\n                        table_top = existing_table.top\n                        table_width = existing_table.width\n                        table_height = existing_table.height\n                    else:\n                        left_pos = existing_table.left\n                        top_pos = existing_table.top\n                        width_pos = existing_table.width\n                        height_pos = existing_table.height\n                        \n                        # Delete the shape\n                        slide.shapes._spTree.remove(existing_table._element)\n                        \n                        # Add a new text box in the same location\n                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                        text_frame = text_box.text_frame\n                        text_frame.text = \"Ticket Details Table data not available\"\n                        count += 1    \n                    \n                elif slide_index == 5:\n                    if csv_dict['closed_ticket_details.csv']:     \n                        num_rows, num_cols = csv_data['closed_ticket_details.csv'].shape\n                        table_height = Inches(1) if num_rows == 0 else  Inches(2)\n                        new_table = slide.shapes.add_table(rows=len(csv_data['closed_ticket_details.csv']) + 1, cols=len(csv_data['closed_ticket_details.csv'].columns),\n                                    left=table_left, top=table_top, width=table_width, height=table_height).table\n                        \n                        for c in range(len(csv_data['closed_ticket_details.csv'].columns)):\n                            new_table.cell(0, c).text = csv_data['closed_ticket_details.csv'].columns[c]\n                        \n                        for r in range(len(csv_data['closed_ticket_details.csv'])):\n                            for c in range(len(csv_data['closed_ticket_details.csv'].columns)):\n                                new_table.cell(r + 1, c).text = str(csv_data['closed_ticket_details.csv'].iloc[r, c]) if pd.notnull(csv_data['closed_ticket_details.csv'].iloc[r, c]) else \"\"\n                    else:\n                        left_pos = table_left\n                        top_pos = table_top\n                        width_pos = table_width\n                        height_pos = table_height\n                        \n                        # Add a new text box in the same location\n                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                        text_frame = text_box.text_frame\n                        text_frame.text = \"Closed Ticket Details Table data not available\"\n                        count += 1               \n                            \n                elif slide_index == 8:\n                    if csv_dict['customer_pending_ticket_details.csv']: \n                        num_rows, num_cols = csv_data['customer_pending_ticket_details.csv'].shape\n                        table_height = Inches(1) if num_rows == 0 else  Inches(2)\n                        new_table = slide.shapes.add_table(rows=len(csv_data['customer_pending_ticket_details.csv']) + 1, cols=len(csv_data['customer_pending_ticket_details.csv'].columns),\n                                    left=table_left, top=table_top, width=table_width, height=table_height).table\n                        \n                        for c in range(len(csv_data['customer_pending_ticket_details.csv'].columns)):\n                            new_table.cell(0, c).text = csv_data['customer_pending_ticket_details.csv'].columns[c]\n                        \n                        for r in range(len(csv_data['customer_pending_ticket_details.csv'])):\n                            for c in range(len(csv_data['customer_pending_ticket_details.csv'].columns)):\n                                new_table.cell(r + 1, c).text = str(csv_data['customer_pending_ticket_details.csv'].iloc[r, c]) if pd.notnull(csv_data['customer_pending_ticket_details.csv'].iloc[r, c]) else \"\"   \n                    else:\n                        left_pos = table_left\n                        top_pos = table_top\n                        width_pos = table_width\n                        height_pos = table_height\n                        \n                        # Add a new text box in the same location\n                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                        text_frame = text_box.text_frame\n                        text_frame.text = \"Customer Pending Ticket Details Table data not available\"\n                        count += 1              \n            \n            # Save presentation to BytesIO\n            output_data = BytesIO()\n            presentation.save(output_data)\n            \n            # Upload presentation to S3\n            s3.put_object(Bucket=destination_bucket, Key=f'{destination_folder}/{output_file}', Body=output_data.getvalue())\n            \n            print(\"Presentation updated and uploaded successfully.\")\n            \n        elif 10 < num_rows <= 15:     \n            # Read template from S3\n            template_file = 'template2.pptx'\n            template_obj = s3.get_object(Bucket=template_bucket, Key=f'{template_folder}/{template_file}')\n            template_data = template_obj['Body'].read()\n            csv_data['ticket_details_table1.csv'] = csv_data['ticket_details_table.csv'].iloc[:10]\n            csv_data['ticket_details_table2.csv'] = csv_data['ticket_details_table.csv'].iloc[10:] \n\n            # Create presentation\n            presentation = Presentation(BytesIO(template_data))\n            \n            # Iterate through slides\n            for slide_index in range(len(presentation.slides)):\n                slide = presentation.slides[slide_index]\n                \n                if slide_index == 0:      \n                    slide.shapes[4].text_frame.paragraphs[0].runs[0].text = customer_name\n                    slide.shapes[4].text_frame.paragraphs[0].runs[1].text = \"\"\n                    slide.shapes[5].text_frame.paragraphs[0].runs[0].text = last_month + ' - ' + last_year\n                    \n                # Update charts\n                if slide_index == 2:\n                    count = 0\n                    for shape in slide.shapes:\n                        if shape.shape_type == MSO_SHAPE_TYPE.CHART:\n                            chart = shape.chart          \n                            if chart.chart_type == XL_CHART_TYPE.BAR_CLUSTERED:\n                                if count == 0:\n                                    if csv_dict['server_utilization_summary.csv']:\n                                        data = csv_data['server_utilization_summary.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Percentage'])\n                                            values.append(row['Servers'])\n                \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1\n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Server Utilization Summary data not available\"\n                                        count += 1\n                                elif count == 2:\n                                    if csv_dict['availability_summary.csv']:\n                                        data = csv_data['availability_summary.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Percentage'])\n                                            values.append(row['Servers'])\n                                    \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1    \n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Availability Summary data not available\"\n                                        count += 1\n                                else:\n                                    count += 1 \n                                    continue\n                                \n                            elif chart.chart_type == XL_CHART_TYPE.BAR_STACKED:                      \n                                if count == 1:\n                                    if csv_dict['ticket_graph.csv']:\n                                        data = csv_data['ticket_graph.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Status'])\n                                            values.append(row['Count'])\n                                    \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1     \n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Ticket Graph data not available\"\n                                        count += 1                                        \n                                else:\n                                    count += 1 \n                                    continue\n                            else:\n                                print(\"Chart type is not XL_CHART_TYPE.BAR_CLUSTERED\")\n                                print(chart.chart_type)\n                if slide_index == 3:\n                    count = 0\n                    for shape in slide.shapes:\n                        if shape.shape_type == MSO_SHAPE_TYPE.CHART:\n                            chart = shape.chart  \n                            if chart.chart_type == XL_CHART_TYPE.BAR_CLUSTERED:\n                                if count == 0:\n                                    if csv_dict['server_utilization_summary.csv']:\n                                        data = csv_data['server_utilization_summary.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Percentage'])\n                                            values.append(row['Servers'])\n                    \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1\n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Server Utilization Summary data not available\"\n                                        count += 1                                        \n                                elif count == 1:\n                                    if csv_dict['availability_summary.csv']:\n                                        data = csv_data['availability_summary.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Percentage'])\n                                            values.append(row['Servers'])\n                                    \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1   \n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Availability Summary data not available\"\n                                        count += 1                                        \n                                else:\n                                    count += 1 \n                                    continue\n                                \n                            else:\n                                print(\"Chart type is not XL_CHART_TYPE.BAR_CLUSTERED\")\n                                print(chart.chart_type)     \n                \n                # Update tables\n                elif slide_index == 4:\n                    existing_table = None\n                    for shape in slide.shapes:\n                        if shape.shape_type == MSO_SHAPE_TYPE.TABLE:\n                            existing_table = shape\n                            break\n                    num_rows, num_cols = csv_data['ticket_details_table1.csv'].shape\n                    table_height = Inches(1) if num_rows == 0 else  Inches(2)\n                    new_table = slide.shapes.add_table(rows=len(csv_data['ticket_details_table1.csv']) + 1, cols=len(csv_data['ticket_details_table1.csv'].columns),\n                                left=existing_table.left, top=existing_table.top, width=existing_table.width, height=table_height).table\n                    \n                    for c in range(len(csv_data['ticket_details_table1.csv'].columns)):\n                        new_table.cell(0, c).text = csv_data['ticket_details_table1.csv'].columns[c]\n                    \n                    for r in range(len(csv_data['ticket_details_table1.csv'])):\n                        for c in range(len(csv_data['ticket_details_table1.csv'].columns)):\n                            new_table.cell(r + 1, c).text = str(csv_data['ticket_details_table1.csv'].iloc[r, c]) if pd.notnull(csv_data['ticket_details_table1.csv'].iloc[r, c]) else \"\"\n                    \n                    slide.shapes._spTree.remove(existing_table._element)\n                    table_left = existing_table.left\n                    table_top = existing_table.top\n                    table_width = existing_table.width\n                    table_height = existing_table.height\n                    \n                elif slide_index == 5:\n                    existing_table = None\n                    for shape in slide.shapes:\n                        if shape.shape_type == MSO_SHAPE_TYPE.TABLE:\n                            existing_table = shape\n                            break\n                    num_rows, num_cols = csv_data['ticket_details_table2.csv'].shape\n                    table_height = Inches(1) if num_rows == 0 else  Inches(2)\n                    new_table = slide.shapes.add_table(rows=len(csv_data['ticket_details_table2.csv']) + 1, cols=len(csv_data['ticket_details_table2.csv'].columns),\n                                left=existing_table.left, top=existing_table.top, width=existing_table.width, height=table_height).table\n                    \n                    for c in range(len(csv_data['ticket_details_table2.csv'].columns)):\n                        new_table.cell(0, c).text = csv_data['ticket_details_table2.csv'].columns[c]\n                    \n                    for r in range(len(csv_data['ticket_details_table2.csv'])):\n                        for c in range(len(csv_data['ticket_details_table2.csv'].columns)):\n                            new_table.cell(r + 1, c).text = str(csv_data['ticket_details_table2.csv'].iloc[r, c]) if pd.notnull(csv_data['ticket_details_table2.csv'].iloc[r, c]) else \"\"\n                    \n                    slide.shapes._spTree.remove(existing_table._element)\n                    table_left = existing_table.left\n                    table_top = existing_table.top\n                    table_width = existing_table.width\n                    table_height = existing_table.height    \n                    \n                elif slide_index == 6:\n                    if csv_dict['closed_ticket_details.csv']:  \n                        num_rows, num_cols = csv_data['closed_ticket_details.csv'].shape\n                        table_height = Inches(1) if num_rows == 0 else  Inches(2)\n                        new_table = slide.shapes.add_table(rows=len(csv_data['closed_ticket_details.csv']) + 1, cols=len(csv_data['closed_ticket_details.csv'].columns),\n                                    left=table_left, top=table_top, width=table_width, height=table_height).table\n                        \n                        for c in range(len(csv_data['closed_ticket_details.csv'].columns)):\n                            new_table.cell(0, c).text = csv_data['closed_ticket_details.csv'].columns[c]\n                        \n                        for r in range(len(csv_data['closed_ticket_details.csv'])):\n                            for c in range(len(csv_data['closed_ticket_details.csv'].columns)):\n                                new_table.cell(r + 1, c).text = str(csv_data['closed_ticket_details.csv'].iloc[r, c]) if pd.notnull(csv_data['closed_ticket_details.csv'].iloc[r, c]) else \"\"   \n                    else:\n                        left_pos = table_left\n                        top_pos = table_top\n                        width_pos = table_width\n                        height_pos = table_height\n                        \n                        # Add a new text box in the same location\n                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                        text_frame = text_box.text_frame\n                        text_frame.text = \"Closed Ticket Details Table data not available\"\n                        count += 1                                    \n                                \n                elif slide_index == 9:\n                    if csv_dict['customer_pending_ticket_details.csv']: \n                        num_rows, num_cols = csv_data['customer_pending_ticket_details.csv'].shape\n                        table_height = Inches(1) if num_rows == 0 else  Inches(2)\n                        new_table = slide.shapes.add_table(rows=len(csv_data['customer_pending_ticket_details.csv']) + 1, cols=len(csv_data['customer_pending_ticket_details.csv'].columns),\n                                    left=table_left, top=table_top, width=table_width, height=table_height).table\n                        \n                        for c in range(len(csv_data['customer_pending_ticket_details.csv'].columns)):\n                            new_table.cell(0, c).text = csv_data['customer_pending_ticket_details.csv'].columns[c]\n                        \n                        for r in range(len(csv_data['customer_pending_ticket_details.csv'])):\n                            for c in range(len(csv_data['customer_pending_ticket_details.csv'].columns)):\n                                new_table.cell(r + 1, c).text = str(csv_data['customer_pending_ticket_details.csv'].iloc[r, c]) if pd.notnull(csv_data['customer_pending_ticket_details.csv'].iloc[r, c]) else \"\"  \n                    else:\n                        left_pos = table_left\n                        top_pos = table_top\n                        width_pos = table_width\n                        height_pos = table_height\n                        \n                        # Add a new text box in the same location\n                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                        text_frame = text_box.text_frame\n                        text_frame.text = \"Customer Pending Ticket Details Table data not available\"\n                        count += 1                                     \n            \n            # Save presentation to BytesIO\n            output_data = BytesIO()\n            presentation.save(output_data)\n            \n            # Upload presentation to S3\n            s3.put_object(Bucket=destination_bucket, Key=f'{destination_folder}/{output_file}', Body=output_data.getvalue())\n            \n            print(\"Presentation updated and uploaded successfully.\")\n        else:\n            # Read template from S3\n            template_file = 'template3.pptx'\n            template_obj = s3.get_object(Bucket=template_bucket, Key=f'{template_folder}/{template_file}')\n            template_data = template_obj['Body'].read()\n            csv_data['ticket_details_table1.csv'] = csv_data['ticket_details_table.csv'].iloc[:10]\n            csv_data['ticket_details_table2.csv'] = csv_data['ticket_details_table.csv'].iloc[10:15] \n            csv_data['ticket_details_table3.csv'] = csv_data['ticket_details_table.csv'].iloc[15:]\n            # Create presentation\n            presentation = Presentation(BytesIO(template_data))\n            \n            # Iterate through slides\n            for slide_index in range(len(presentation.slides)):\n                slide = presentation.slides[slide_index]\n    \n                if slide_index == 0:      \n                    slide.shapes[4].text_frame.paragraphs[0].runs[0].text = customer_name\n                    slide.shapes[4].text_frame.paragraphs[0].runs[1].text = \"\"\n                    slide.shapes[5].text_frame.paragraphs[0].runs[0].text = last_month + ' - ' + last_year\n                \n                # Update charts\n                if slide_index == 2:\n                    count = 0\n                    for shape in slide.shapes:\n                        if shape.shape_type == MSO_SHAPE_TYPE.CHART:\n                            chart = shape.chart          \n                            if chart.chart_type == XL_CHART_TYPE.BAR_CLUSTERED:\n                                if count == 0:\n                                    if csv_dict['server_utilization_summary.csv']:\n                                        data = csv_data['server_utilization_summary.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Percentage'])\n                                            values.append(row['Servers'])\n                \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1\n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Server Utilization Summary data not available\"\n                                        count += 1\n                                elif count == 2:\n                                    if csv_dict['availability_summary.csv']:\n                                        data = csv_data['availability_summary.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Percentage'])\n                                            values.append(row['Servers'])\n                                    \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1    \n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Availability Summary data not available\"\n                                        count += 1\n                                else:\n                                    count += 1 \n                                    continue\n                                \n                            elif chart.chart_type == XL_CHART_TYPE.BAR_STACKED:                      \n                                if count == 1:\n                                    if csv_dict['ticket_graph.csv']:\n                                        data = csv_data['ticket_graph.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Status'])\n                                            values.append(row['Count'])\n                                    \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1     \n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Ticket Graph data not available\"\n                                        count += 1                                        \n                                else:\n                                    count += 1 \n                                    continue\n                            else:\n                                print(\"Chart type is not XL_CHART_TYPE.BAR_CLUSTERED\")\n                                print(chart.chart_type)\n                if slide_index == 3:\n                    count = 0\n                    for shape in slide.shapes:\n                        if shape.shape_type == MSO_SHAPE_TYPE.CHART:\n                            chart = shape.chart  \n                            if chart.chart_type == XL_CHART_TYPE.BAR_CLUSTERED:\n                                if count == 0:\n                                    if csv_dict['server_utilization_summary.csv']:\n                                        data = csv_data['server_utilization_summary.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Percentage'])\n                                            values.append(row['Servers'])\n                    \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1\n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Server Utilization Summary data not available\"\n                                        count += 1                                        \n                                elif count == 1:\n                                    if csv_dict['availability_summary.csv']:\n                                        data = csv_data['availability_summary.csv']\n                                        categories = []\n                                        values = []\n                                    \n                                        for index, row in data.iterrows():\n                                            categories.append(row['Percentage'])\n                                            values.append(row['Servers'])\n                                    \n                                        chart_data = CategoryChartData()\n                                        chart_data.categories = categories\n                                        chart_data.add_series('Series 1', values)\n                                        chart.replace_data(chart_data)\n                                        count += 1   \n                                    else:\n                                        left_pos = shape.left\n                                        top_pos = shape.top\n                                        width_pos = shape.width\n                                        height_pos = shape.height\n                                        \n                                        # Delete the shape\n                                        slide.shapes._spTree.remove(shape._element)\n                                        \n                                        # Add a new text box in the same location\n                                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                                        text_frame = text_box.text_frame\n                                        text_frame.text = \"Availability Summary data not available\"\n                                        count += 1                                        \n                                else:\n                                    count += 1 \n                                    continue\n                                \n                            else:\n                                print(\"Chart type is not XL_CHART_TYPE.BAR_CLUSTERED\")\n                                print(chart.chart_type)     \n                \n                # Update tables\n                elif slide_index == 4:\n                    existing_table = None\n                    for shape in slide.shapes:\n                        if shape.shape_type == MSO_SHAPE_TYPE.TABLE:\n                            existing_table = shape\n                            break\n                    num_rows, num_cols = csv_data['ticket_details_table1.csv'].shape\n                    table_height = Inches(1) if num_rows == 0 else  Inches(2)\n                    new_table = slide.shapes.add_table(rows=len(csv_data['ticket_details_table1.csv']) + 1, cols=len(csv_data['ticket_details_table1.csv'].columns),\n                                left=existing_table.left, top=existing_table.top, width=existing_table.width, height=table_height).table\n                    \n                    for c in range(len(csv_data['ticket_details_table1.csv'].columns)):\n                        new_table.cell(0, c).text = csv_data['ticket_details_table1.csv'].columns[c]\n                    \n                    for r in range(len(csv_data['ticket_details_table1.csv'])):\n                        for c in range(len(csv_data['ticket_details_table1.csv'].columns)):\n                            new_table.cell(r + 1, c).text = str(csv_data['ticket_details_table1.csv'].iloc[r, c]) if pd.notnull(csv_data['ticket_details_table1.csv'].iloc[r, c]) else \"\"\n                    \n                    slide.shapes._spTree.remove(existing_table._element)\n                    table_left = existing_table.left\n                    table_top = existing_table.top\n                    table_width = existing_table.width\n                    table_height = existing_table.height\n                    \n                elif slide_index == 5:\n                    existing_table = None\n                    for shape in slide.shapes:\n                        if shape.shape_type == MSO_SHAPE_TYPE.TABLE:\n                            existing_table = shape\n                            break\n                    num_rows, num_cols = csv_data['ticket_details_table2.csv'].shape\n                    table_height = Inches(1) if num_rows == 0 else  Inches(2)\n                    new_table = slide.shapes.add_table(rows=len(csv_data['ticket_details_table2.csv']) + 1, cols=len(csv_data['ticket_details_table2.csv'].columns),\n                                left=existing_table.left, top=existing_table.top, width=existing_table.width, height=table_height).table\n                    \n                    for c in range(len(csv_data['ticket_details_table2.csv'].columns)):\n                        new_table.cell(0, c).text = csv_data['ticket_details_table2.csv'].columns[c]\n                    \n                    for r in range(len(csv_data['ticket_details_table2.csv'])):\n                        for c in range(len(csv_data['ticket_details_table2.csv'].columns)):\n                            new_table.cell(r + 1, c).text = str(csv_data['ticket_details_table2.csv'].iloc[r, c]) if pd.notnull(csv_data['ticket_details_table2.csv'].iloc[r, c]) else \"\"\n                    \n                    slide.shapes._spTree.remove(existing_table._element)\n                    table_left = existing_table.left\n                    table_top = existing_table.top\n                    table_width = existing_table.width\n                    table_height = existing_table.height    \n                \n                elif slide_index == 6:\n                    existing_table = None\n                    for shape in slide.shapes:\n                        if shape.shape_type == MSO_SHAPE_TYPE.TABLE:\n                            existing_table = shape\n                            break\n                    num_rows, num_cols = csv_data['ticket_details_table3.csv'].shape\n                    table_height = Inches(1) if num_rows == 0 else  Inches(2)\n                    new_table = slide.shapes.add_table(rows=len(csv_data['ticket_details_table3.csv']) + 1, cols=len(csv_data['ticket_details_table3.csv'].columns),\n                                left=existing_table.left, top=existing_table.top, width=existing_table.width, height=table_height).table\n                    \n                    for c in range(len(csv_data['ticket_details_table3.csv'].columns)):\n                        new_table.cell(0, c).text = csv_data['ticket_details_table3.csv'].columns[c]\n                    \n                    for r in range(len(csv_data['ticket_details_table3.csv'])):\n                        for c in range(len(csv_data['ticket_details_table3.csv'].columns)):\n                            new_table.cell(r + 1, c).text = str(csv_data['ticket_details_table3.csv'].iloc[r, c]) if pd.notnull(csv_data['ticket_details_table3.csv'].iloc[r, c]) else \"\"\n                    \n                    slide.shapes._spTree.remove(existing_table._element)\n                    table_left = existing_table.left\n                    table_top = existing_table.top\n                    table_width = existing_table.width\n                    table_height = existing_table.height\n                    \n                elif slide_index == 7:\n                    if csv_dict['closed_ticket_details.csv']:  \n                        num_rows, num_cols = csv_data['closed_ticket_details.csv'].shape\n                        table_height = Inches(1) if num_rows == 0 else  Inches(2)\n                        new_table = slide.shapes.add_table(rows=len(csv_data['closed_ticket_details.csv']) + 1, cols=len(csv_data['closed_ticket_details.csv'].columns),\n                                    left=table_left, top=table_top, width=table_width, height=table_height).table\n                        \n                        for c in range(len(csv_data['closed_ticket_details.csv'].columns)):\n                            new_table.cell(0, c).text = csv_data['closed_ticket_details.csv'].columns[c]\n                        \n                        for r in range(len(csv_data['closed_ticket_details.csv'])):\n                            for c in range(len(csv_data['closed_ticket_details.csv'].columns)):\n                                new_table.cell(r + 1, c).text = str(csv_data['closed_ticket_details.csv'].iloc[r, c]) if pd.notnull(csv_data['closed_ticket_details.csv'].iloc[r, c]) else \"\"    \n                    else:\n                        left_pos = table_left\n                        top_pos = table_top\n                        width_pos = table_width\n                        height_pos = table_height\n                        \n                        # Add a new text box in the same location\n                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                        text_frame = text_box.text_frame\n                        text_frame.text = \"Closed Ticket Details Table data not available\"\n                        count += 1                                \n                            \n                elif slide_index == 10:\n                    if csv_dict['customer_pending_ticket_details.csv']: \n                        num_rows, num_cols = csv_data['customer_pending_ticket_details.csv'].shape\n                        table_height = Inches(1) if num_rows == 0 else  Inches(2)\n                        new_table = slide.shapes.add_table(rows=len(csv_data['customer_pending_ticket_details.csv']) + 1, cols=len(csv_data['customer_pending_ticket_details.csv'].columns),\n                                    left=table_left, top=table_top, width=table_width, height=table_height).table\n                        \n                        for c in range(len(csv_data['customer_pending_ticket_details.csv'].columns)):\n                            new_table.cell(0, c).text = csv_data['customer_pending_ticket_details.csv'].columns[c]\n                        \n                        for r in range(len(csv_data['customer_pending_ticket_details.csv'])):\n                            for c in range(len(csv_data['customer_pending_ticket_details.csv'].columns)):\n                                new_table.cell(r + 1, c).text = str(csv_data['customer_pending_ticket_details.csv'].iloc[r, c]) if pd.notnull(csv_data['customer_pending_ticket_details.csv'].iloc[r, c]) else \"\"    \n                    else:\n                        left_pos = table_left\n                        top_pos = table_top\n                        width_pos = table_width\n                        height_pos = table_height\n                        \n                        # Add a new text box in the same location\n                        text_box = slide.shapes.add_textbox(left_pos, top_pos, width_pos, height_pos)\n                        text_frame = text_box.text_frame\n                        text_frame.text = \"Customer Pending Ticket Details Table data not available\"\n                        count += 1                                     \n            \n            # Save presentation to BytesIO\n            output_data = BytesIO()\n            presentation.save(output_data)\n            \n            # Upload presentation to S3\n            s3.put_object(Bucket=destination_bucket, Key=f'{destination_folder}/{output_file}', Body=output_data.getvalue())\n            \n            print(\"Presentation updated and uploaded successfully.\")    \nexcept Exception as e:\n    print(f'An error occurred: {str(e)}')\n    event_bridge = boto3.client('events')\n    try:\n        response = event_bridge.put_events(\n            Entries=[\n                {\n                    \"Time\": datetime.now(),\n                    \"Source\": \"custom_event\",\n                    \"DetailType\": \"Glue Job State Change\",\n                    \"Detail\": json.dumps({\n                        \"state\": \"ERROR\",\n                        \"jobName\": \"PPT_Generation_Job\",\n                        \"errorMessage\": str(e)  \n                    })\n                }\n            ]\n        )\n        print(response)\n    except Exception as e:\n        print(f'An error occurred: {str(e)}')              "
}